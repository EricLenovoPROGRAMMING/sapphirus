var GACHAMINO_SET;

const GACHAMINO_MATRIX = [
	 [
 	[
 		[2, 0, 0],
 		[2, 2, 0],
 		[0, 2, 0],
 	],
 	[
 		[0, 0, 0],
 		[0, 2, 2],
 		[2, 2, 0],
 	],
 	[
 		[0, 2, 0],
 		[0, 2, 2],
 		[0, 0, 2],
 	],
 	[
 		[0, 2, 2],
 		[2, 2, 0],
 		[0, 0, 0],
 	],
 ],
 [
 	[
 		[0, 3, 0],
 		[0, 3, 0],
 		[3, 3, 0]
 	],
  [
 		[0, 0, 0],
 		[3, 3, 3],
 		[0, 0, 3],
 	],
 	[
 		[0, 3, 3],
 		[0, 3, 0],
 		[0, 3, 0]
 	],
 	[
 		[3, 0, 0],
 		[3, 3, 3],
 		[0, 0, 0]
 	],

 ],
 [
 	[
 		[4, 4],
 		[4, 4],
 	],
 	[
 		[4, 4],
 		[4, 4],
 	],
 	[
 		[4, 4],
 		[4, 4],
 	],
 	[
 		[4, 4],
 		[4, 4],
 	]
 ],
  [
 	[
 		[0, 5, 0],
 		[5, 5, 0],
 		[5, 0, 0]
 	],
 	[
 		[0, 0, 0],
 		[5, 5, 0],
 		[0, 5, 5],
 	],
 	[
 		[0, 0, 5],
 		[0, 5, 5],
 		[0, 5, 0],
 	],
 	[
 		[5, 5, 0],
 		[0, 5, 5],
 		[0, 0, 0],
 	],
 ],
 [
 	[
 	 [0, 0, 0, 0, 0],
 	 [0, 0, 6, 0, 0],
 	 [0, 0, 6, 0, 0],
 	 [0, 0, 6, 0, 0],
 	 [0, 0, 6, 0, 0],
 	],
 	[
 	 [0, 0, 0, 0, 0],
 	 [0, 0, 0, 0, 0],
 	 [0, 6, 6, 6, 6],
 	 [0, 0, 0, 0, 0],
 	 [0, 0, 0, 0, 0],
 	],
 	[
 	 [0, 0, 6, 0, 0],
 	 [0, 0, 6, 0, 0],
 	 [0, 0, 6, 0, 0],
 	 [0, 0, 6, 0, 0],
 	 [0, 0, 0, 0, 0],
 	],
 	[
 	 [0, 0, 0, 0, 0],
 	 [0, 0, 0, 0, 0],
 	 [6, 6, 6, 6, 0],
 	 [0, 0, 0, 0, 0],
 	 [0, 0, 0, 0, 0],
 	],
 ],
 [
 	[
 		[7, 7, 0],
 		[0, 7, 0],
 		[0, 7, 0],
 	],
 	[
 		[0, 0, 0],
 		[7, 7, 7],
 		[7, 0, 0],
 	],
 	[
 		[0, 7, 0],
 		[0, 7, 0],
 		[0, 7, 7],
 	],
 	[
 		[0, 0, 7],
 		[7, 7, 7],
 		[0, 0, 0],
 	],
 ],
 [
 	[
 		[0, 8, 0],
 		[8, 8, 0],
 		[0, 8, 0],
 	],
 	[
 		[0, 0, 0],
 		[8, 8, 8],
 		[0, 8, 0],
 	],
 	[
 		[0, 8, 0],
 		[0, 8, 8],
 		[0, 8, 0],
 	],
 	[
 		[0, 8, 0],
 		[8, 8, 8],
 		[0, 0, 0],
 	],
 ],


];
const GACHAMINO_WK_SRS = {
	other: {
		left: [
	  [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0]],
	  [[0, 0], [1, 0], [1, 1], [0, -2], [1, -2]],
	  [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0]],
	  [[0, 0], [-1, 0], [-1, 1], [0, -2], [-1, -2]],
	  ],
		right: [
	  [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0]],
	  [[0, 0], [1, 0], [1, 1], [0, -2], [1, -2]],
	  [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0]],
	  [[0, 0], [-1, 0], [-1, 1], [0, -2], [-1, -2]],
	  ],
		double: [
	  [[0, 0], [1, 0], [2, 0], [1, 1], [2, 1], [-1, 0], [-2, 0], [-1, 1], [-2, 1], [0, -1], [3, 0], [-3, 0]],
	  [[0, 0], [0, 1], [0, 2], [-1, 1], [-1, 2], [0, -1], [0, -2], [-1, -1], [-1, -2], [1, 0], [0, 3], [0, -3]],
	  [[0, 0], [-1, 0], [-2, 0], [-1, -1], [-2, -1], [1, 0], [2, 0], [1, -1], [2, -1], [0, 1], [-3, 0], [3, 0]],
	  [[0, 0], [0, 1], [0, 2], [1, 1], [1, 2], [0, -1], [0, -2], [1, -1], [1, -2], [-1, 0], [0, 3], [0, -3]]
	  ],
	},
	I: {
		left: [
	  [[0, 0], [-1, 0], [2, 0], [-1, 0], [2, 0]],
	  [[-1, 0], [0, 0], [0, 0], [0, -1], [0, 2]],
	  [[-1, -1], [1, -1], [-2, -1], [1, 0], [-2, 0]],
	  [[0, -1], [0, -1], [0, -1], [0, 1], [0, -2]],
	  ],
		right: [
	  [[0, 0], [-1, 0], [2, 0], [-1, 0], [2, 0]],
	  [[-1, 0], [0, 0], [0, 0], [0, -1], [0, 2]],
	  [[-1, -1], [1, -1], [-2, -1], [1, 0], [-2, 0]],
	  [[0, -1], [0, -1], [0, -1], [0, 1], [0, -2]],
	  ],
		double: [
	  [[0, 0], [-1, 0], [-2, 0], [1, 0], [2, 0], [0, 1]],
	  [[0, 0], [0, 1], [0, 2], [0, -1], [0, -2], [-1, 0]],
	  [[0, 0], [1, 0], [2, 0], [-1, 0], [-2, 0], [0, -1]],
	  [[0, 0], [0, 1], [0, 2], [0, -1], [0, -2], [1, 0]]
	  ],
	}
};
const GACHAMINO_SPIN = {
		I: {
			highX: [[1, 2, 2, 1], [1, 3, 1, 3], [1, 2, 2, 1], [0, 2, 0, 2]],
			highY: [[0, 2, 0, 2], [1, 2, 2, 1], [1, 3, 1, 3], [1, 2, 2, 1]],
			lowX: [[-1, 4, -1, 4], [2, 2, 2, 2], [-1, 4, -1, 4], [1, 1, 1, 1]],
			lowY: [[1, 1, 1, 1], [-1, 4, -1, 4], [2, 2, 2, 2], [-1, 4, -1, 4]]
		},
		J: {
			highX: [[1, 2], [2, 2], [1, 0], [0, 0]],
			highY: [[0, 0], [1, 2], [2, 2], [1, 0]],
			lowX: [[0, 2], [0, 0], [2, 0], [2, 2]],
			lowY: [[2, 2], [0, 2], [0, 0], [2, 0]]
		},
		L: {
			highX: [[1, 0], [2, 2], [1, 2], [0, 0]],
			highY: [[0, 0], [1, 0], [2, 2], [1, 2]],
			lowX: [[2, 0], [0, 0], [0, 2], [2, 2]],
			lowY: [[2, 2], [2, 0], [0, 0], [0, 3]]
		},
		O: {
			highX: [[0, 0], [0, 0], [0, 0], [0, 0]],
			highY: [[0, 0], [0, 0], [0, 0], [0, 0]],
			lowX: [[0, 0], [0, 0], [0, 0], [0, 0]],
			lowY: [[0, 0], [0, 0], [0, 0], [0, 0]]
		},
		S: {
			highX: [[0, 2], [1, 2], [2, 0], [1, 0]],
			highY: [[0, 1], [2, 0], [2, 1], [0, 2]],
			lowX: [[0, -1], [1, 2], [-1, 3], [1, 0]],
			lowY: [[0, 1], [-1, 3], [2, 1], [3, -1]]
		},
		T: {
			highX: [[0, 2], [2, 2], [0, 2], [0, 0]],
			highY: [[0, 0], [0, 2], [2, 2], [0, 2]],
			lowX: [[0, 2], [0, 0], [0, 2], [2, 2]],
			lowY: [[2, 2], [0, 2], [0, 0], [0, 2]]
		},
		Z: {
			highX: [[2, 0], [2, 1], [0, 2], [0, 1]],
			highY: [[0, 1], [2, 0], [2, 1], [0, 2]],
			lowX: [[-1, 3], [2, 1], [3, -1], [0, 1]],
			lowY: [[0, 1], [-1, 3], [2, 1], [3, -1]]
		},
	},
	GACHAMINO_SPAWN_OFFSETS = {
		Z: [3, 0],
		L: [3, 0],
		O: [4, 0],
		S: [3, 0],
		I: [2, -1],
		T: [3, 0],
		J: [3, 0],
	};

GACHAMINO_SET = (function() {
		var a = [];
		var b = ["Z", "L", "O", "S", "I", "J", "T"];
		for (var i = 0; i < 7; i++) {
			a.push({
				index: i,
				x: GACHAMINO_SPAWN_OFFSETS[b[i]][0],
				y: GACHAMINO_SPAWN_OFFSETS[b[i]][1],
				matrix: GACHAMINO_MATRIX[i],
				wallKick: GACHAMINO_WK_SRS[i !== 4 ? "other" : "I"],
				spinDetection: GACHAMINO_SPIN[b[i]]
			});
		};
		return a;
	})(),
	SCORE_TABLE = {
		pc: {
			b2b: {
					spin: [0, 1800, 2800, 5400],
					mini: [0, 1500, 2100, 2400],
					line: [0, 0, 0, 0, 3200, 4200],
				},
				nob2b: {
					spin: [0, 1200, 2400, 3600],
					mini: [0, 1000, 1400, 1800],
					line: [0, 800, 1200, 1800, 2000, 2800],
				}
		},
		nopc: {
			b2b: {
				spin: [400, 1200, 1600, 2400],
				mini: [100, 300, 600, 900],
				line: [0, 0, 0, 0, 1200, 1900],
			},
			nob2b: {
    spin: [400, 800, 1200, 1600],
   	mini: [100, 200, 400, 600],
   	line: [0, 100, 300, 500, 800, 1400],
			}
		},
		combo: 50,
	},
	
	AI_X_MOVEMENT_CONVERSION = {
		[1 * -2]: [2,2,2,2,2],
		[1 * -1]: [2,2,2,2],
		0: [2,2,2],
		1: [2,2],
		2: [2],
		3: [],
		4: [3],
		5: [3,3],
		6: [3,3,3],
		7: [3,3,3,3],
		8: [3,3,3,3,3]
	}



const currentSettings = {
	binds: {
		pause: 27,
		LEFT: 37,
		RIGHT: 39,
		SOFTDROP: 40,
		HARDDROP: 32,
		HOLD: 67,
		CW: 88,
		CCW: 90,
		C180W: 16,
		retry: 82,
	},
};

const KEY_FLAGS = {
	LEFT: 1,
	RIGHT: 2,
	SOFTDROP: 4,
	HARDDROP: 8,
	HOLD: 16,
	CW: 32,
	CCW: 64,
	C180W: 128,
};


function kFlag(keyCode) {
	if (keyCode === currentSettings.binds.LEFT) {
		return KEY_FLAGS.LEFT;
	} else if (keyCode === currentSettings.binds.RIGHT) {
		return KEY_FLAGS.RIGHT;
	} else if (keyCode === currentSettings.binds.SOFTDROP) {
		return KEY_FLAGS.SOFTDROP;
	} else if (keyCode === currentSettings.binds.HARDDROP) {
		return KEY_FLAGS.HARDDROP;
	} else if (keyCode === currentSettings.binds.CW) {
		return KEY_FLAGS.CW;
	} else if (keyCode === currentSettings.binds.CCW) {
		return KEY_FLAGS.CCW;
	} else if (keyCode === currentSettings.binds.C180W) {
		return KEY_FLAGS.rot180;
	} else if (keyCode === currentSettings.binds.HOLD) {
		return KEY_FLAGS.HOLD;
	} else {
		return 0;
	}
};

function keypressInteractor(evt) {
	if ([32, 37, 38, 39, 40].indexOf(evt.keyCode) !== -1)
		evt.preventDefault();
		/*if (e.type === "keydown" && e.keyCode === binds.pause) {
			if (gameManager.isPaused) {
				unpause();
			} else {
				pause();
			}
		}/**/
		if (evt.type === "keydown" && evt.keyCode === currentSettings.binds.retry) {
			gameManager.initialize("retry");
		}
	if (!gameManager.isReplay) {
		var flag = kFlag(evt.keyCode);
		if (evt.type === "keydown") {
			gameManager.players[0].keysPressed |= flag;
		} else if (evt.type === "keyup") {
			gameManager.players[0].keysPressed &= ~flag;
		}
	}
}

addEventListener("keyup", keypressInteractor, false);
addEventListener("keydown", keypressInteractor, false);
